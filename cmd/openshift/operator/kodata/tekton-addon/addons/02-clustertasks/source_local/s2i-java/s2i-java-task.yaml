---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java"
spec:
  description: >-
    s2i-java task clones a Git repository and builds and
    pushes a container image using S2I and a Java builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of java imagestream for java version
      default: 'latest'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: registry.redhat.io/rhel8/buildah@sha256:55f5c7d88c77e1ab5a2ab8e877172b2b66cb196e21f10dc45148470d0ee8bbae
    - name: SKIP_PUSH
      description: Skip pushing the built image
      default: "false"
    - name: ENV_VARS
      type: array
      description: Environment variables to set during _build-time_.
      default: []
  workspaces:
    - name: source
      mountPath: /workspace/source
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry.
        The file should be placed at the root of the Workspace with name config.json.
      optional: true
  steps:
    - name: generate
      image: registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4
      workingDir: $(workspaces.source.path)
      args: ["$(params.ENV_VARS[*])"]
      script: |
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > /env-vars/env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> /env-vars/env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> /env-vars/env-file

          echo "Processing Build Environment Variables"
          for var in "$@"
          do
            echo "$var" >> /env-vars/env-file
          done

          s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION) \
          --image-scripts-url image:///usr/local/s2i \
          --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: env-vars
          mountPath: /env-vars
      env:
        - name: HOME
          value: /tekton/home
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      workingDir: /gen-source
      script: |
        buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
           --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)

        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      securityContext:
        capabilities:
          add: ["SETFCAP"]
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: env-vars
      emptyDir: {}
