apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tekton-webhooks-extension
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-webhooks-extension-minimal
  namespace: tekton-pipelines
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  - namespaces
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - create
  - delete
  - update
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks
  - clustertasks
  - taskruns
  - pipelines
  - pipelineruns
  - pipelineresources
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - taskruns/finalizers
  - pipelineruns/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks/status
  - clustertasks/status
  - taskruns/status
  - pipelines/status
  - pipelineruns/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - sources.eventing.knative.dev
  resources:
  - githubsources
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-webhooks-extension-minimal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-webhooks-extension-minimal
subjects:
- kind: ServiceAccount
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webhooks-extension
  name: webhooks-extension
  namespace: tekton-pipelines
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhooks-extension
  template:
    metadata:
      labels:
        app: webhooks-extension
    spec:
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: INSTALLED_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DOCKER_REGISTRY_LOCATION
          value: DOCKER_REPO
        - name: WEB_RESOURCES_DIR
          value: web
        image: gcr.io/tekton-releases/github.com/tektoncd/experimental/webhooks-extension/cmd/extension@sha256:4b227d0cb2ff9f2bd5ac2746a51bec8eff55d29cfd4ae60afa8dd68d6c4fe2f0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /liveness
            port: 8080
        name: webhooks-extension
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
      serviceAccountName: tekton-webhooks-extension

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    tekton-dashboard-bundle-location: web/extension.9b61e1e9.js
    tekton-dashboard-display-name: Webhooks
    tekton-dashboard-endpoints: webhooks.web
  labels:
    app: webhooks-extension
    tekton-dashboard-extension: "true"
  name: webhooks-extension
  namespace: tekton-pipelines
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: webhooks-extension
  type: NodePort

---
apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  labels:
    app: webhooks-extension-sink
  name: webhooks-extension-sink
  namespace: tekton-pipelines
spec:
  template:
    spec:
      containers:
      - env:
        - name: INSTALLED_NAMESPACE
          value: tekton-pipelines
        - name: SERVICEACCOUNT
          value: tekton-webhooks-extension
        image: gcr.io/tekton-releases/github.com/tektoncd/experimental/webhooks-extension/cmd/sink@sha256:b7ef6c779aa02a395459a08facd6d581e350179ecdf447681b207515ddf521b9
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /liveness
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readiness
      serviceAccountName: tekton-webhooks-extension

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-result-task
  namespace: tekton-pipelines
spec:
  inputs:
    params:
    - default: default pipelinerun
      description: The name of the pipelineruns (and their namespace) to be monitored
        in format pipelinerun1:namespace1, pipelinerun2:namespace2
      name: pipelineruns
      type: string
    - default: Success
      description: The text of the success comment
      name: commentsuccess
      type: string
    - default: Failed
      description: The text of the failure comment
      name: commentfailure
      type: string
    - default: http://localhost:9097/
      description: The URL to the pipelineruns page of the dashboard
      name: dashboard-url
      type: string
    - description: The secret containing the access token to access github
      name: secret
      type: string
    resources:
    - name: pull-request
      type: pullRequest
  outputs:
    resources:
    - name: pull-request
      type: pullRequest
  steps:
  - args:
    - -ce
    - |
      set -e
      cat <<EOF | python
      import time, os, json, requests, pprint
      from kubernetes import client, config
      config.load_incluster_config()
      api_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))
      gitPRcontext = "Tekton"
      gitPRurl = ""
      # This is the code thats puts the pullrequest into pending status, this is code to rip out later if there
      # is a fix to the above mentioned update status to pending issue.
      with open("/workspace/pull-request/github/pr.json") as fp:
        rawdata = json.load(fp)
        statusurl = rawdata['statuses_url']
      pendingData = {
        "state": "pending",
        "description": "pipelines in progress",
        "target_url": "",
        "context": "Tekton"
      }
      print("Setting status to pending with URL : " + statusurl)
      resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type': 'application/json', 'Authorization': "Bearer $GITHUBTOKEN"})
      print(resp)
      # End of code to replace
      if not "$URL".startswith("http"):
        pipelineRunURLPrefix = "http://" + "$URL"
      else:
        pipelineRunURLPrefix = "$URL"
      runsToCheck = "$PIPELINERUNS".split(",")
      runsPassed = []
      runsFailed = []
      runsIncomplete = []
      failed = 0
      i = range(180)
      for x in i:
          time.sleep( 10 )
          if len(runsToCheck) > 0:
            for entry in runsToCheck:
              pr, namespace, pipeline = entry.split(":")
              pr = pr.strip()
              namespace = namespace.strip()
              pipeline = pipeline.strip()
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelines/" + pipeline + "/runs/" + pr
              print("Checking pipelinerun " + pr + " in namespace " + namespace)
              output = api_instance.get_namespaced_custom_object("tekton.dev", "v1alpha1", namespace, "pipelineruns", pr)
              if output["status"]["conditions"][0]["status"] == u'True' and output["status"]["conditions"][0]["type"] == u'Succeeded':
                print("Success - pipelinerun " + pr + " in namespace " + namespace)
                runsToCheck.remove(entry)
                runsPassed.append("[**$COMMENT_SUCCESS**](" + link + ") | " + pipeline + " | " +  pr + " | " + namespace)
              if output["status"]["conditions"][0]["status"] == u'False' and output["status"]["conditions"][0]["type"] == u'Succeeded':
                failed =+ 1
                print("Failed - pipelinerun " + pr + " in namespace " + namespace)
                runsToCheck.remove(entry)
                runsFailed.append("[**$COMMENT_FAILURE**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
          else:
            break
      gitPRdescription = "All pipelines succeeded!"
      gitPRcode = "success"
      if failed > 0:
        gitPRdescription = str(failed) + " pipeline(s) failed!"
        gitPRcode = "failure"
      if len(runsToCheck) > 0:
        print("Some pipelineruns had not completed when the monitor reached its timeout")
        gitPRdescription = "timed out monitoring pipeline runs"
        gitPRcode = "error"
        for entry in runsToCheck:
          pr, namespace, pipeline = entry.split(":")
          pr = pr.strip()
          namespace = namespace.strip()
          pipeline = pipeline.strip()
          print("Still Running - pipelinerun " + pr + " in namespace " + namespace)
          link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelines/" + pipeline + "/runs/" + pr
          runsIncomplete.append("[**??????**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
      results = runsPassed + runsFailed + runsIncomplete
      comment = ("## Tekton Status Report \n\n"
                 "Status | Pipeline | PipelineRun | Namespace\n"
                 ":----- | :------- | :--------------- | :--------\n"
                 ) + "\n".join(results)
      handle = open("/workspace/pull-request/comments/newcomment.json", 'w')
      handle.write(comment)
      handle.close()
      if not "$URL".startswith("http"):
        detailsURL = "http://" + "$URL" + "/#/pipelineruns"
      else:
        detailsURL = "$URL" + "/#/pipelineruns"
      print("Set details url to: " + detailsURL)
      status = json.dumps(dict(code=gitPRcode, description=gitPRdescription, id=gitPRcontext, url=detailsURL))
      handle = open("/workspace/pull-request/status/newstatus.json", 'w')
      handle.write(status)
      handle.close()
      EOF
    command:
    - /bin/bash
    env:
    - name: PIPELINERUNS
      value: $(inputs.params.pipelineruns)
    - name: COMMENT_SUCCESS
      value: $(inputs.params.commentsuccess)
    - name: COMMENT_FAILURE
      value: $(inputs.params.commentfailure)
    - name: URL
      value: $(inputs.params.dashboard-url)
    - name: GITHUBTOKEN
      valueFrom:
        secretKeyRef:
          key: accessToken
          name: $(inputs.params.secret)
    image: maiwj/kubernetes-python-client:latest@sha256:74a868a0dff5c8ada64472db3efd09d205d4f877d14d2d3226511adbb25cfea3
    name: check

---
