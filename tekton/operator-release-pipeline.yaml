---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: operator-release
spec:
  params:
  - name: package
    description: package to release
    default: github.com/tektoncd/operator
  - name: gitRevision
    description: the git revision to release
  - name: imageRegistry
    description: The target image registry
    default: ghcr.io
  - name: imageRegistryPath
    description: The path (project) in the image registry
    default: tekton-releases
  - name: imageRegistryRegions
    description: The target image registry regions
    default: "us eu asia"
  - name: imageRegistryUser
    description: The user for the image registry credentials
    default: _json_key
  - name: versionTag
    description: The X.Y.Z version that the artifacts should be tagged with
  - name: releaseBucket
    description: bucket where the release is stored. The bucket must be project specific.
    default: gs://tekton-releases-nightly/operator
  - name: releaseAsLatest
    description: Whether to tag and publish this release as Operator's latest
    default: "true"
  - name: platforms
    description: Platforms to publish for the images (e.g. linux/amd64,linux/arm64)
    default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
  - name: koExtraArgs
    description: Extra args to be passed to ko
    default: "--preserve-import-paths"
  - name: serviceAccountPath
    description: The path to the service account file within the release-secret workspace
  - name: serviceAccountImagesPath
    description: The path to the service account file or credentials within the release-images-secret workspace
  - name: runTests
    description: If set to something other than "true", skip the build and test tasks
    default: "true"
  - name: kubeDistros
    description: The kubernetes platform (e.g. kubernetes or openshift ... ) targeted by a pipeline run
    default: "kubernetes openshift"
  - name: components
    description: Components file to use
    default: components.yaml
  workspaces:
  - name: workarea
    description: The workspace where the repo will be cloned.
  - name: release-secret
    description: The secret that contains a service account authorized to push to the imageRegistry and to the output bucket
  - name: release-images-secret
    description: The secret that contains a service account authorized to push to the imageRegistry
  results:
  - name: commit-sha
    description: the sha of the commit that was released
    value: $(tasks.git-clone.results.commit)
  - name: release-file
    description: the URL of the release file for kubernetes platform
    value: $(tasks.report-bucket.results.release)
  - name: release-file-no-tag
    description: the URL of the release file for kubernetes platform
    value: $(tasks.report-bucket.results.release-no-tag)
  - name: openshift-release-file
    description: the URL of the release file for OpenShift platform
    value: $(tasks.report-bucket.results.openshift-release)
  - name: release-file-no-tag
    description: the URL of the release file for OpenShift platform
    value: $(tasks.report-bucket.results.openshift-release-no-tag)
  tasks:
  - name: git-clone
    taskRef:
      resolver: hub
      params:
        - name: name
          value: git-clone
        - name: version
          value: "0.7"
    workspaces:
      - name: output
        workspace: workarea
        subPath: git
    params:
    - name: url
      value: https://$(params.package)
    - name: revision
      value: $(params.gitRevision)
  - name: precheck
    runAfter:
    - git-clone
    taskRef:
      resolver: git
      params:
      - name: repo
        value: plumbing
      - name: org
        value: tektoncd
      - name: revision
        value: aeed19e5a36f335ebfdc4b96fa78d1ce5bb4f7b8
      - name: pathInRepo
        value: tekton/resources/release/base/prerelease_checks.yaml
    params:
    - name: package
      value: $(params.package)
    - name: versionTag
      value: $(params.versionTag)
    - name: releaseBucket
      value: $(params.releaseBucket)
    workspaces:
    - name: source-to-release
      workspace: workarea
      subPath: git
  - name: unit-tests
    runAfter:
    - precheck
    when:
    - cel: "'$(params.runTests)' == 'true'"
    taskRef:
      resolver: bundles
      params:
      - name: bundle
        value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-test:0.2
      - name: name
        value: golang-test
      - name: kind
        value: task
    params:
    - name: package
      value: $(params.package)
    - name: flags
      value: -v -mod=vendor
    workspaces:
    - name: source
      workspace: workarea
      subPath: git
  - name: fetch-component-releases
    runAfter:
    - unit-tests
    taskRef:
      resolver: git
      params:
        - name: repo
          value: operator
        - name: org
          value: tektoncd
        - name: revision
          value: $(params.gitRevision)
        - name: pathInRepo
          value: tekton/task-fetch-components.yaml
    workspaces:
    - name: source
      workspace: workarea
      subPath: git
    params:
    - name: components
      value: $(params.components)
    - name: TARGET_PLATFORMS
      value: $(params.kubeDistros)
  - name: build-test
    runAfter:
    - fetch-component-releases
    when:
      - cel: "'$(params.runTests)' == 'true'"
    taskRef:
      resolver: bundles
      params:
        - name: bundle
          value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-build:0.3
        - name: name
          value: golang-build
        - name: kind
          value: task
    params:
    - name: package
      value: $(params.package)
    - name: packages
      value: ./cmd/...
    workspaces:
    - name: source
      workspace: workarea
      subPath: git
  - name: publish-images-platform-kubernetes
    runAfter:
    - build-test
    taskRef:
      resolver: git
      params:
        - name: repo
          value: operator
        - name: org
          value: tektoncd
        - name: revision
          value: $(params.gitRevision)
        - name: pathInRepo
          value: tekton/build-publish-images-manifests.yaml
    params:
    - name: package
      value: $(params.package)
    - name: versionTag
      value: $(params.versionTag)
    - name: imageRegistry
      value: $(params.imageRegistry)
    - name: imageRegistryPath
      value: $(params.imageRegistryPath)
    - name: imageRegistryUser
      value: $(params.imageRegistryUser)
    - name: imageRegistryRegions
      value: $(params.imageRegistryRegions)
    - name: releaseAsLatest
      value: $(params.releaseAsLatest)
    - name: platforms
      value: $(params.platforms)
    - name: serviceAccountPath
      value: $(params.serviceAccountImagesPath)
    - name: kubeDistro
      value: kubernetes
    - name: releaseFilePrefix
      value: ""
    - name: koExtraArgs
      value: $(params.koExtraArgs)
    workspaces:
    - name: source
      workspace: workarea
      subPath: git
    - name: output
      workspace: workarea
      subPath: bucket
    - name: release-secret
      workspace: release-images-secret
  - name: publish-images-platform-openshift
    runAfter:
    - build-test
    taskRef:
      resolver: git
      params:
        - name: repo
          value: operator
        - name: org
          value: tektoncd
        - name: revision
          value: $(params.gitRevision)
        - name: pathInRepo
          value: tekton/build-publish-images-manifests.yaml
    params:
    - name: package
      value: $(params.package)
    - name: versionTag
      value: $(params.versionTag)
    - name: imageRegistry
      value: $(params.imageRegistry)
    - name: imageRegistryPath
      value: $(params.imageRegistryPath)
    - name: imageRegistryUser
      value: $(params.imageRegistryUser)
    - name: imageRegistryRegions
      value: $(params.imageRegistryRegions)
    - name: releaseAsLatest
      value: $(params.releaseAsLatest)
    - name: platforms
      value: $(params.platforms)
    - name: serviceAccountPath
      value: $(params.serviceAccountImagesPath)
    - name: kubeDistro
      value: openshift
    - name: releaseFilePrefix
      value: "openshift-"
    - name: koExtraArgs
      value: $(params.koExtraArgs)
    workspaces:
    - name: source
      workspace: workarea
      subPath: git
    - name: output
      workspace: workarea
      subPath: bucket
    - name: release-secret
      workspace: release-images-secret
  - name: publish-to-bucket
    runAfter:
    - publish-images-platform-kubernetes
    - publish-images-platform-openshift
    taskRef:
      resolver: bundles
      params:
        - name: bundle
          value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
        - name: name
          value: gcs-upload
        - name: kind
          value: task
    workspaces:
    - name: credentials
      workspace: release-secret
    - name: source
      workspace: workarea
      subPath: bucket
    params:
    - name: location
      value: $(params.releaseBucket)/previous/$(params.versionTag)
    - name: path
      value: $(params.versionTag)
    - name: serviceAccountPath
      value: $(params.serviceAccountPath)
  - name: publish-to-bucket-latest
    runAfter:
    - publish-images-platform-kubernetes
    - publish-images-platform-openshift
    when:
    - input: "$(params.releaseAsLatest)"
      operator: in
      values:
      - "true"
    taskRef:
      resolver: bundles
      params:
        - name: bundle
          value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
        - name: name
          value: gcs-upload
        - name: kind
          value: task
    workspaces:
    - name: credentials
      workspace: release-secret
    - name: source
      workspace: workarea
      subPath: bucket
    params:
    - name: location
      value: $(params.releaseBucket)/latest
    - name: path
      value: $(params.versionTag)
    - name: serviceAccountPath
      value: $(params.serviceAccountPath)
  - name: report-bucket
    runAfter:
    - publish-to-bucket
    params:
    - name: releaseBucket
      value: $(params.releaseBucket)
    - name: versionTag
      value: $(params.versionTag)
    taskSpec:
      params:
      - name: releaseBucket
      - name: versionTag
      results:
      - name: release
        description: The full URL of the release file in the bucket
      - name: release-no-tag
        description: The full URL of the release file (no tag) in the bucket
      - name: openshift-release
        description: The full URL of the release file (platform - OpenShift) in the bucket
      - name: openshift-release-no-tag
        description: The full URL of the release file (no tag, platform - OpenShift) in the bucket
      steps:
      - name: create-results
        image: docker.io/library/alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
        script: |
          BASE_URL=$(echo "$(params.releaseBucket)/previous/$(params.versionTag)")
          # If the bucket is in the gs:// return the corresponding public https URL
          BASE_URL=$(echo ${BASE_URL} | sed 's,gs://,https://storage.googleapis.com/,g')
          echo "${BASE_URL}/release.yaml" > $(results.release.path)
          echo "${BASE_URL}/release.notags.yaml" > $(results.release-no-tag.path)
          echo "${BASE_URL}/openshift-release.yaml" > $(results.openshift-release.path)
          echo "${BASE_URL}/openshift-release.notags.yaml" > $(results.openshift-release-no-tag.path)
